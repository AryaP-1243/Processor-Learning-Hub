import React, { useState, useCallback } from 'react';
import { Processor } from '../types';
import * as geminiService from '../services/geminiService';

interface ComparisonData {
  feature: string;
  proc1: string;
  proc2: string;
}

const LoadingSpinner: React.FC = () => (
    <div className="flex items-center justify-center space-x-2 py-8">
        <div className="w-4 h-4 rounded-full bg-blue-400 animate-bounce" style={{ animationDelay: '0s' }}></div>
        <div className="w-4 h-4 rounded-full bg-blue-400 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
        <div className="w-4 h-4 rounded-full bg-blue-400 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
        <span className="text-gray-300">AI is generating comparison...</span>
    </div>
);

const ProcessorComparison: React.FC<{ allProcessors: Processor[] }> = ({ allProcessors }) => {
  const [proc1, setProc1] = useState<Processor | null>(allProcessors[0] || null);
  const [proc2, setProc2] = useState<Processor | null>(allProcessors[1] || null);
  const [comparison, setComparison] = useState<ComparisonData[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleCompare = useCallback(async () => {
    if (!proc1 || !proc2) {
      setError("Please select two processors to compare.");
      return;
    }
    if (proc1.id === proc2.id) {
      setError("Please select two different processors.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setComparison([]);

    try {
      const resultString = await geminiService.compareProcessors(proc1, proc2);
      const result = JSON.parse(resultString);
      if (result.error) {
        setError(result.error);
      } else {
        setComparison(Array.isArray(result.comparison) ? result.comparison : []);
      }
    } catch (e) {
      setError("Failed to parse AI response. Please try again.");
      console.error(e);
    } finally {
      setIsLoading(false);
    }
  }, [proc1, proc2]);

  const ProcessorSelect: React.FC<{
    value: Processor | null,
    onChange: (p: Processor | null) => void,
    id: string
  }> = ({ value, onChange, id }) => (
    <select
      id={id}
      value={value?.id || ''}
      onChange={(e) => onChange(allProcessors.find(p => p.id === e.target.value) || null)}
      className="w-full bg-gray-700 border-gray-600 text-white rounded-md p-3 focus:ring-blue-500 focus:border-blue-500"
    >
      <option value="" disabled>Select Processor</option>
      {allProcessors.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
    </select>
  );

  return (
    <div className="max-w-7xl mx-auto animate-fade-in">
      <div className="text-center mb-12">
        <h1 className="text-4xl md:text-5xl font-extrabold tracking-tight">Processor Comparison</h1>
        <p className="mt-4 max-w-2xl mx-auto text-lg text-gray-400">
          Select two processors to see a side-by-side comparison generated by AI.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-center max-w-3xl mx-auto">
        <ProcessorSelect id="proc1" value={proc1} onChange={setProc1} />
        <ProcessorSelect id="proc2" value={proc2} onChange={setProc2} />
      </div>

      <div className="text-center mt-6">
        <button
          onClick={handleCompare}
          disabled={isLoading || !proc1 || !proc2}
          className="px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed transition-all"
        >
          {isLoading ? 'Generating...' : 'Compare Processors'}
        </button>
      </div>
      
      {error && <p className="text-center text-red-400 mt-4">{error}</p>}

      {isLoading && <LoadingSpinner />}
      
      {comparison.length > 0 && (
        <div className="mt-12 bg-gray-800 rounded-lg overflow-hidden border border-gray-700">
          <div className="grid grid-cols-3">
            <div className="p-4 bg-gray-900 font-bold text-lg border-b border-r border-gray-700">Feature</div>
            <div className="p-4 bg-gray-900 font-bold text-lg border-b border-r border-gray-700">{proc1?.name}</div>
            <div className="p-4 bg-gray-900 font-bold text-lg border-b border-gray-700">{proc2?.name}</div>
          </div>
          <div>
            {comparison.map((row, index) => (
              <div key={index} className="grid grid-cols-3 odd:bg-gray-800 even:bg-gray-800/50">
                <div className="p-4 font-semibold border-r border-gray-700">{row.feature}</div>
                <div className="p-4 text-gray-300 border-r border-gray-700">{row.proc1}</div>
                <div className="p-4 text-gray-300">{row.proc2}</div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ProcessorComparison;